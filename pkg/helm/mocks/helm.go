// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "chart-viewer/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// Helm is an autogenerated mock type for the Helm type
type Helm struct {
	mock.Mock
}

// GetManifest provides a mock function with given fields: chartUrl, chartName, chartVersion
func (_m *Helm) GetManifest(chartUrl string, chartName string, chartVersion string) []model.Template {
	ret := _m.Called(chartUrl, chartName, chartVersion)

	var r0 []model.Template
	if rf, ok := ret.Get(0).(func(string, string, string) []model.Template); ok {
		r0 = rf(chartUrl, chartName, chartVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Template)
		}
	}

	return r0
}

// GetValues provides a mock function with given fields: chartUrl, chartName, chartVersion
func (_m *Helm) GetValues(chartUrl string, chartName string, chartVersion string) (error, map[string]interface{}) {
	ret := _m.Called(chartUrl, chartName, chartVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(chartUrl, chartName, chartVersion)
	} else {
		r0 = ret.Error(0)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string, string) map[string]interface{}); ok {
		r1 = rf(chartUrl, chartName, chartVersion)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	return r0, r1
}

// RenderManifest provides a mock function with given fields: chartUrl, chartName, chartVersion, files
func (_m *Helm) RenderManifest(chartUrl string, chartName string, chartVersion string, files []string) (error, []model.Manifest) {
	ret := _m.Called(chartUrl, chartName, chartVersion, files)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(chartUrl, chartName, chartVersion, files)
	} else {
		r0 = ret.Error(0)
	}

	var r1 []model.Manifest
	if rf, ok := ret.Get(1).(func(string, string, string, []string) []model.Manifest); ok {
		r1 = rf(chartUrl, chartName, chartVersion, files)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Manifest)
		}
	}

	return r0, r1
}
